import React, { Component } from 'react';
import shouldPureComponentUpdate from 'react-pure-render/function';

export default class MusicNote extends Component {
  shouldComponentUpdate = shouldPureComponentUpdate;

  renderQuarterNote = (x, y, color) => {
    if(y <= 93) {
      return (
        <svg x={x} y={y} style={{ overflow: 'visible' }}>
          <g transform='rotate(180 8 24)'>
            <path fill={color} d='M9.983673 28.250856c3.056256-1.637973 4.684752-4.603095 3.682998-6.833664-1.068533-2.379276-4.740308-3.050748-8.19592-1.498833-3.455605 1.551923-5.392945 4.74246-4.32441 7.121726 1.068542 2.379276 4.740308 3.050748 8.19592 1.498833.215974-.096994.437653-.178867.641413-1.188064z'/>
            <path strokeWidth='1.2' stroke={color} d='M 13.35547,24.05645 L 13.35547,-13.16888' />
          </g>
        </svg>
      );
    }

    return (
      <svg x={x} y={y} style={{ overflow: 'visible' }}>
        <path fill={color} d='M9.983673 28.250856c3.056256-1.637973 4.684752-4.603095 3.682998-6.833664-1.068533-2.379276-4.740308-3.050748-8.19592-1.498833-3.455605 1.551923-5.392945 4.74246-4.32441 7.121726 1.068542 2.379276 4.740308 3.050748 8.19592 1.498833.215974-.096994.437653-.178867.641413-1.188064z'/>
        <path strokeWidth='1.2' stroke={color} d='M 13.35547,24.05645 L 13.35547,-13.16888' />
      </svg>
    );
  };

  renderHalfNote = (x, y, color) => {
    return (
      <svg x={x} y={y} style={{ overflow: 'visible' }}>
        <g transform='scale(0.75) translate(-5, -9)'>
        <path d='M16.315 43.816c3.396-1.82 5.205-5.114 4.092-7.592-1.187-2.644-5.267-3.39-9.106-1.666-3.84 1.724-5.99 5.27-4.804 7.913 1.187 2.645 5.267 3.39 9.106 1.667.24-.108.487-.2.713-.32zm-1.11-2.242c-.24.125-.485.218-.74.333-3.274 1.47-6.435 1.54-7.057.154-.622-1.383 1.53-3.7 4.803-5.17 3.274-1.47 6.435-1.54 7.057-.154.573 1.276-1.215 3.37-4.062 4.838z'
          opacity='.9' fillRule='evenodd' fill={color} />
        <path d='M19.948 37.483V3.896' fill='none' stroke={color} strokeWidth={1.5} />
        </g>
      </svg>
    );
  };

  renderWholeNote = (x, y, color) => {
    return (
      <svg x={x} y={y} style={{ overflow: 'visible' }}>
        <g transform='scale(1.5)'>
          <path fill={color} d='M6.65021 6.42029c-1.717-.09085-3.05874-1.61496-3.59713-3.19103-.32619-.92504-.14703-2.31276.93966-2.5726C5.56715.38926 6.8736 1.72667 7.60581 3.00653c.5216.94927.80997 2.44415-.16802 3.19662-.23221.15573-.51292.21819-.78758.21714zM9.38546 1.017C7.45101-.1579 5.00741-.24942 2.88913.4081 1.5473.87725.01269 1.87523 0 3.4995c-.00093 1.59146 1.48 2.58425 2.79049 3.05709 2.07469.67865 4.46847.61897 6.40552-.4629 1.09648-.58336 2.06833-1.79134 1.73878-3.13026-.18121-.86097-.84075-1.5052-1.54933-1.94643z'/>
        </g>
      </svg>
    );
  };

  renderEighthNote = (x, y, color) => {
    return (
      <svg x={x - 8} y={y - 15} style={{ overflow: 'visible' }}>
        <g transform='scale(0.4)'>
          <path fill={color} d='M23.71961 87.85213c-5.58785-5.02026-2.53077-13.19751 6.69317-17.90321 3.07692-1.56973 5.34644-2.24914 9.40578-2.12895 2.46224.06314 5.29391 1.48242 5.29391 1.48242 0-18.05494-.06821-52.28016-.06821-69.15127 1.00028.00563 1.64015-.00648 3.04094-.00648 0 .99254-.01335 1.7062-.01335 2.58602 0 .85738.06034 1.41406.1432 1.95287.96866 6.29923 2.37919 8.7789 9.42205 16.56374 8.9072 9.84558 11.49436 15.77596 11.44145 23.65154-.04921 7.38807-6.54795 23.21243-8.02557 22.55589 2.05465-5.53599 4.82532-11.50844 5.56223-16.50593.90056-6.10733-1.58049-14.72667-5.57333-19.27425-3.28359-3.73981-10.84654-7.08467-12.90954-7.08467 0 0-.08757 36.37228-.08757 50.16231 0 2.37471-2.15126 6.40059-3.36307 7.84809-5.52631 6.60112-16.13366 9.58986-20.96209 5.25188z'/>
        </g>
      </svg>
    );
  };

  renderSixteenthNote = (x, y, color) => {
    return (
      <svg x={x - 8} y={y - 15} style={{ overflow: 'visible' }}>
        <g transform='scale(0.4)'>
          <path fill={color} d='M23.71961 87.85213c-5.58785-5.02026-2.53077-13.19751 6.69317-17.90321 3.07692-1.56973 5.34644-2.24914 9.40578-2.12895 2.46224.06314 5.29391 1.48242 5.29391 1.48242 0-18.05494-.06821-52.28016-.06821-69.15127 1.00028.00563 1.64015-.00648 3.04094-.00648 0 .99254-.01335 1.7062-.01335 2.58602 0 .85738.06034 1.41406.1432 1.95287.96866 6.29923 2.37919 8.7789 9.42205 16.56374 8.9072 9.84558 11.49436 15.77596 11.44145 23.65154-.04921 7.38807-6.54795 23.21243-8.02557 22.55589 2.05465-5.53599 4.82532-11.50844 5.56223-16.50593.90056-6.10733-1.58049-14.72667-5.57333-19.27425-3.28359-3.73981-10.84654-7.08467-12.90954-7.08467 0 0-.08757 36.37228-.08757 50.16231 0 2.37471-2.15126 6.40059-3.36307 7.84809-5.52631 6.60112-16.13366 9.58986-20.96209 5.25188z'/>
        </g>
      </svg>
    );
  };

  renderNote = (x, y, color) => {
    switch(this.props.note.duration) {
      case 'q':
        return this.renderQuarterNote(x + 1, y, color);
      case 'h':
        return this.renderHalfNote(x + 1, y, color);
      case 'w':
        return this.renderWholeNote(x + 1, y, color);
      case 'e':
        return this.renderEighthNote(x + 1, y, color);
      case 's':
        return this.renderSixteenthNote(x + 1, y, color);
      default:
        return null;
    }
  };

  renderDot = (dotted, x, stringOffset, color) => {
    if(!dotted) {
      return null;
    }
    const y = 119 - (13 * stringOffset);

    return (
      <svg x={x} y={y} width={20} height={20}>
        <circle cx={6.5} cy={10} r={1.5} fill={color} stroke={color} />
      </svg>
    );
  };

  renderTremolo = (tremolo, x, stringOffset, color) => {
    if(!tremolo) {
      return null;
    }
    const y = 100 - (13 * stringOffset);

    return (
      <svg x={x + 1.5} y={y} >
        <g transform='scale(0.30)'>
          <polygon fill={color} points='31.5,7 3.75,21.25 3.75,14.5 31.5,0.25'/>
          <polygon fill={color} points='31.5,19.25 3.75,33.5 3.75,26.75 31.5,12.5'/>
          <polygon fill={color} points='31.5,31.5 3.75,45.75 3.75,39 31.5,24.75'/>
        </g>
      </svg>
    );
  };

  renderVibrato = (vibrato, x, color) => {
    if(!vibrato) {
      return null;
    }

    return (
      <svg x={x + 1.5} y={10}>
        <g transform='scale(8.00, 6.00)'>
          <path fill={color}
             d='M 1.864,0.316 C 1.88,0.292 1.9,0.28 1.928,0.28 c 0.044,0 0.08,0.036 0.08,0.08 0,0.016 -0.004,0.032 -0.012,0.044 C 1.872,0.592 1.748,0.776 1.624,0.964 1.608,0.988 1.584,1 1.556,1 1.532,1 1.512,0.992 1.496,0.972 L 1.104,0.496 0.792,0.964 C 0.776,0.988 0.752,1 0.724,1 0.7,1 0.68,0.992 0.664,0.972 L 0.268,0.496 C 0.228,0.56 0.184,0.62 0.144,0.684 0.128,0.708 0.108,0.72 0.08,0.72 0.036,0.72 0,0.684 0,0.64 0,0.624 0.004,0.608 0.012,0.596 0.136,0.408 0.26,0.224 0.384,0.036 0.4,0.012 0.424,0 0.452,0 0.476,0 0.496,0.008 0.512,0.028 L 0.904,0.504 1.216,0.036 C 1.232,0.012 1.256,0 1.284,0 1.308,0 1.328,0.008 1.344,0.028 L 1.74,0.504 C 1.78,0.44 1.824,0.38 1.864,0.316 Z' />
        </g>
        <g transform='translate(13.0, 0.0)'>
          <g transform='scale(8.00, 6.00)'>
            <path fill={color}
               d='M 1.864,0.316 C 1.88,0.292 1.9,0.28 1.928,0.28 c 0.044,0 0.08,0.036 0.08,0.08 0,0.016 -0.004,0.032 -0.012,0.044 C 1.872,0.592 1.748,0.776 1.624,0.964 1.608,0.988 1.584,1 1.556,1 1.532,1 1.512,0.992 1.496,0.972 L 1.104,0.496 0.792,0.964 C 0.776,0.988 0.752,1 0.724,1 0.7,1 0.68,0.992 0.664,0.972 L 0.268,0.496 C 0.228,0.56 0.184,0.62 0.144,0.684 0.128,0.708 0.108,0.72 0.08,0.72 0.036,0.72 0,0.684 0,0.64 0,0.624 0.004,0.608 0.012,0.596 0.136,0.408 0.26,0.224 0.384,0.036 0.4,0.012 0.424,0 0.452,0 0.476,0 0.496,0.008 0.512,0.028 L 0.904,0.504 1.216,0.036 C 1.232,0.012 1.256,0 1.284,0 1.308,0 1.328,0.008 1.344,0.028 L 1.74,0.504 C 1.78,0.44 1.824,0.38 1.864,0.316 Z' />
          </g>
        </g>
      </svg>
    );
  };

  renderTrill = (trill, x, color) => {
    if(!trill) {
      return null;
    }

    return (
      <svg x={x + 1.5} y={10}>
        <text y={7} style={{ fontSize: 12 }}>tr</text>
        <g transform='translate(11.0, 0.0)'>
          <g transform='scale(8.00, 6.00)'>
            <path fill={color}
               d='M 1.864,0.316 C 1.88,0.292 1.9,0.28 1.928,0.28 c 0.044,0 0.08,0.036 0.08,0.08 0,0.016 -0.004,0.032 -0.012,0.044 C 1.872,0.592 1.748,0.776 1.624,0.964 1.608,0.988 1.584,1 1.556,1 1.532,1 1.512,0.992 1.496,0.972 L 1.104,0.496 0.792,0.964 C 0.776,0.988 0.752,1 0.724,1 0.7,1 0.68,0.992 0.664,0.972 L 0.268,0.496 C 0.228,0.56 0.184,0.62 0.144,0.684 0.128,0.708 0.108,0.72 0.08,0.72 0.036,0.72 0,0.684 0,0.64 0,0.624 0.004,0.608 0.012,0.596 0.136,0.408 0.26,0.224 0.384,0.036 0.4,0.012 0.424,0 0.452,0 0.476,0 0.496,0.008 0.512,0.028 L 0.904,0.504 1.216,0.036 C 1.232,0.012 1.256,0 1.284,0 1.308,0 1.328,0.008 1.344,0.028 L 1.74,0.504 C 1.78,0.44 1.824,0.38 1.864,0.316 Z' />
          </g>
        </g>
      </svg>
    );
  };

  render() {
    const { x, y, fret, color } = this.props;

    let width = 12;
    if(fret > 9) {
      width += 6;
    }

    //  use rotate(180 9 31) to flip quarter note
    return (
      <g>
        { this.renderNote(x, y, color) }
      </g>
    );
  }
}
